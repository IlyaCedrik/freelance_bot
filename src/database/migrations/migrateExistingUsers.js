import { supabase } from '../../config/supabase.js';
import Referral from '../models/Referral.js';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */

class ExistingUsersMigration {
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–µ—Ç–æ–¥—É –≤ Referral.js)
  static async generateUniqueReferralCode() {
    let attempts = 0;
    let code;
    
    do {
      code = `REF${Math.random().toString(36).substring(2, 8).toUpperCase()}`;
      attempts++;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
      const { data: existing } = await supabase
        .from('users')
        .select('id')
        .eq('referral_code', code)
        .single();
      
      if (!existing) {
        break;
      }
    } while (attempts < 10);
    
    if (attempts >= 10) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥');
    }
    
    return code;
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
  static async migrateAllUsers() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
      const { data: usersWithoutCodes, error: usersError } = await supabase
        .from('users')
        .select('id, telegram_id, first_name, created_at')
        .is('referral_code', null);

      if (usersError) throw usersError;

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: ${usersWithoutCodes.length}`);

      let successCount = 0;
      let errorCount = 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
      const batchSize = 10;
      for (let i = 0; i < usersWithoutCodes.length; i += batchSize) {
        const batch = usersWithoutCodes.slice(i, i + batchSize);
        
        console.log(`‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${i + 1}-${Math.min(i + batchSize, usersWithoutCodes.length)} –∏–∑ ${usersWithoutCodes.length}`);
        
        await Promise.all(
          batch.map(async (user) => {
            try {
              await this.migrateUser(user);
              successCount++;
              console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegram_id} (${user.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}) –æ–±–Ω–æ–≤–ª–µ–Ω`);
            } catch (error) {
              errorCount++;
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}:`, error.message);
            }
          })
        );

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        if (i + batchSize < usersWithoutCodes.length) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await this.validateMigration();

    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async migrateUser(user) {
    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    const referralCode = await this.generateUniqueReferralCode();
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: updateError } = await supabase
      .from('users')
      .update({
        referral_code: referralCode,
        referral_balance: 0,
        active_referrals_count: 0
      })
      .eq('id', user.id);

    if (updateError) throw updateError;

    // 3. –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { error: statsError } = await supabase
      .from('referral_stats')
      .insert([{
        user_id: user.id,
        total_referrals: 0,
        active_referrals: 0,
        total_activations: 0,
        total_payments: 0,
        total_payment_amount: 0,
        total_commission_earned: 0,
        current_commission_percent: 10.00
      }]);

    if (statsError && statsError.code !== '23505') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      throw statsError;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
  static async validateMigration() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
    const { data: usersWithoutCodes } = await supabase
      .from('users')
      .select('count')
      .is('referral_code', null);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const { data: usersWithoutStats } = await supabase
      .from('users')
      .select(`
        id,
        referral_stats!left(user_id)
      `)
      .is('referral_stats.user_id', null);

    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: ${usersWithoutCodes?.[0]?.count || 0}`);
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${usersWithoutStats?.length || 0}`);

    if ((usersWithoutCodes?.[0]?.count || 0) === 0 && (usersWithoutStats?.length || 0) === 0) {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
    } else {
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫.');
    }
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏)
  static async migrateSingleUser(telegramId) {
    console.log(`üîß –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}...`);
    
    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegramId)
      .single();

    if (error) throw error;
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    await this.migrateUser(user);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
  }

  // –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º)
  static async rollbackMigration() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    try {
      // –£–¥–∞–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { error: updateError } = await supabase
        .from('users')
        .update({
          referral_code: null,
          referral_balance: null,
          active_referrals_count: null,
          referrer_id: null
        })
        .not('referral_code', 'is', null);

      if (updateError) throw updateError;

      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      await supabase.from('referral_stats').delete().neq('id', '00000000-0000-0000-0000-000000000000');
      await supabase.from('referral_commissions').delete().neq('id', '00000000-0000-0000-0000-000000000000');
      await supabase.from('referral_codes').delete().neq('id', '00000000-0000-0000-0000-000000000000');

      console.log('‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ:', error);
      throw error;
    }
  }
}

export default ExistingUsersMigration; 