import 'dotenv/config';
import { Telegraf, Scenes, session, Markup } from 'telegraf';
const { Stage } = Scenes;
import express from 'express';
import helmet from 'helmet';
import cors from 'cors';

// Services
import { supabase } from './config/supabase.js';
import schedulerService from './services/scheduler.js';

// Bot handlers
import startHandler from './bot/handlers/start.js';
import subscriptionHandler from './bot/handlers/subscription.js';
import paymentHandler from './bot/handlers/payment.js';
import settingsHandler from './bot/handlers/settings.js';
import referralHandler from './bot/handlers/referral.js';
import profileHandler from './bot/handlers/profile.js';
import {
  requireAdmin,
  showAdminPanel,
  showChannelManagement,
  showCategoryManagement,
  showUserManagement,
  listChannels,
  listCategories,
  listUsers,
  showChannelDetails,
  startAddChannel,
  startMakeAdmin,
  handleAdminTextInput
} from './bot/handlers/admin.js';

// Scenes
import subscriptionScene from './bot/scenes/subscription.js';
import paymentScene from './bot/scenes/payment.js';
import promoCodeScene from './bot/scenes/promoCode.js';

// Middleware
import authMiddleware from './bot/middleware/auth.js';
import subscriptionMiddleware from './bot/middleware/subscription.js';

// Utils
import messageManager from './bot/utils/messageManager.js';
import navigation from './bot/utils/navigation.js';

// Initialize bot
const bot = new Telegraf(process.env.BOT_TOKEN);

// Setup bot commands and menu
async function setupBotCommands() {
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
    const commands = [
      { command: 'start', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
      { command: 'categories', description: 'üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤' },
      { command: 'subscriptions', description: 'üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏' },
      { command: 'profile', description: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' },
      { command: 'settings', description: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞' },
      { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' }
    ];

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
    await bot.telegram.setMyCommands(commands);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Menu Button (–∫–Ω–æ–ø–∫–∞ —Å–ª–µ–≤–∞ –æ—Ç —Å–∫—Ä–µ–ø–∫–∏)
    await bot.telegram.setChatMenuButton({
      type: 'commands'
    });

    console.log('‚úÖ Bot commands menu configured successfully');
  } catch (error) {
    console.error('‚ùå Error setting up bot commands:', error);
  }
}

// Setup scenes
const stage = new Stage([subscriptionScene, paymentScene, promoCodeScene]);

// Bot middleware
bot.use(session());
bot.use(stage.middleware());
bot.use(authMiddleware);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ routes
function setupNavigation() {
  // –ì–ª–∞–≤–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
  navigation.register('main_menu', startHandler.startHandler);
  navigation.register('back_to_main', startHandler.startHandler);
  navigation.register('categories', subscriptionHandler.showCategories);
  navigation.register('my_subscriptions', subscriptionHandler.mySubscriptions);
  navigation.register('settings', settingsHandler.showSettings);
  navigation.register('profile', profileHandler.showProfile);
  
  // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  navigation.register('referral_program', referralHandler.showReferralProgram);
  navigation.register('referral_refresh', referralHandler.refreshReferralStats);
  navigation.register('referral_details', referralHandler.showReferralDetails);
  navigation.register('referral_withdraw', referralHandler.showWithdrawOptions);
  navigation.register('create_promo_code', referralHandler.createPromoCode);
  navigation.register('show_user_promo_codes', referralHandler.showUserPromoCodes);
  
  // –ü—Ä–æ—Ñ–∏–ª—å
  navigation.register('user_stats', profileHandler.showUserStats);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
  navigation.register('show_subscriptions', subscriptionHandler.mySubscriptions);
  navigation.register('show_privacy', settingsHandler.showPrivacyPolicy);
  navigation.register('export_data', settingsHandler.exportUserData);
  navigation.register('delete_account_confirm', settingsHandler.confirmDeleteAccount);
  navigation.register('delete_account_final', settingsHandler.deleteAccount);
  
  console.log('üß≠ Navigation routes registered:', navigation.getRoutes().length);
}

setupNavigation();

// Global error handler –¥–ª—è –±–æ—Ç–∞
bot.catch((err, ctx) => {
  console.error('Bot error occurred:', err);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (ctx.from) {
    console.error('Error for user:', {
      id: ctx.from.id,
      username: ctx.from.username,
      first_name: ctx.from.first_name
    });
  }
  
  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  messageManager.sendMessage(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.').catch(() => {});
});

// Bot commands
bot.start(startHandler.startHandler);
bot.command('categories', subscriptionHandler.showCategories);
bot.command('subscriptions', subscriptionHandler.mySubscriptions);
bot.command('profile', profileHandler.showProfile);
bot.command('settings', settingsHandler.showSettings);
bot.command('delete_account', settingsHandler.confirmDeleteAccount);
bot.command('help', startHandler.help);

// Bot actions - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
bot.action(/^subscribe_(.+)$/, subscriptionHandler.subscribe);
bot.action(/^unsubscribe_(.+)$/, subscriptionHandler.unsubscribe);
bot.action(/^pay_(.+)$/, paymentHandler.createInvoice);
bot.action(/^cancel_subscription_(.+)$/, subscriptionHandler.confirmCancelSubscription);
bot.action(/^confirm_cancel_(.+)$/, subscriptionHandler.cancelSubscriptionFinal);

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
bot.action('withdraw_card', (ctx) => referralHandler.initiateWithdraw(ctx, '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'));
bot.action('withdraw_qiwi', (ctx) => referralHandler.initiateWithdraw(ctx, 'QIWI'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ü–µ–Ω (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞)
bot.action('cancel_promo_creation', async (ctx) => {
  try {
    await ctx.answerCbQuery('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    await messageManager.sendMessage(
      ctx,
      '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ',
      Markup.inlineKeyboard([
        [Markup.button.callback('üìä –ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ', 'referral_program')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
      ])
    );
  } catch (error) {
    console.error('Cancel promo creation error:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ü–µ–Ω–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
bot.action(/^promo_days_\d+$/, async (ctx) => {
  if (ctx.scene && ctx.scene.current) {
    // –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–µ, –ø–æ–∑–≤–æ–ª–∏–º —Å—Ü–µ–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    return;
  }
  await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
});

bot.action(/^promo_discount_\d+$/, async (ctx) => {
  if (ctx.scene && ctx.scene.current) {
    return;
  }
  await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
});

bot.action(/^promo_limit_\d+$/, async (ctx) => {
  if (ctx.scene && ctx.scene.current) {
    return;
  }
  await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
});

bot.action('confirm_promo_creation', async (ctx) => {
  if (ctx.scene && ctx.scene.current) {
    return;
  }
  await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
});

// –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏—è (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤)
bot.action('admin_main', requireAdmin, showAdminPanel);
bot.action('admin_channels', requireAdmin, showChannelManagement);
bot.action('admin_categories', requireAdmin, showCategoryManagement);
bot.action('admin_users', requireAdmin, showUserManagement);
bot.action('admin_list_channels', requireAdmin, listChannels);
bot.action('admin_list_categories', requireAdmin, listCategories);
bot.action('admin_list_users', requireAdmin, listUsers);
bot.action('admin_add_channel', requireAdmin, startAddChannel);
bot.action('admin_make_admin', requireAdmin, startMakeAdmin);
bot.action(/^admin_channel_details_(.+)$/, requireAdmin, showChannelDetails);

// –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
bot.command('admin', requireAdmin, showAdminPanel);

// Navigation actions - –≤—Å–µ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
const navActions = [
  'main_menu', 'back_to_main', 'categories', 'my_subscriptions', 'settings', 'profile',
  'show_subscriptions', 'show_privacy', 'export_data', 
  'delete_account_confirm', 'delete_account_final',
  'referral_program', 'referral_refresh', 'referral_details', 'referral_withdraw',
  'create_promo_code', 'show_user_promo_codes', 'user_stats'
];

navActions.forEach(action => {
  bot.action(action, navigation.middleware(action));
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries
bot.on('callback_query', async (ctx) => {
  // –ï—Å–ª–∏ callback query –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
  if (!ctx.callbackQuery.answered) {
    const callbackData = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    const sceneName = ctx.scene?.current?.id || 'none';
    
    console.log(`‚ùì Unknown callback query: ${callbackData} from user ${userId} (scene: ${sceneName})`);
    
    try {
      // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å—Ü–µ–Ω–µ
      if (callbackData.startsWith('promo_') || callbackData === 'confirm_promo_creation') {
        await ctx.answerCbQuery('‚ö†Ô∏è –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        await messageManager.sendMessage(
          ctx,
          '–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.',
          Markup.inlineKeyboard([
            [Markup.button.callback('üé´ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'create_promo_code')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
          ])
        );
      } else {
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        await messageManager.sendMessage(ctx, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
      }
    } catch (error) {
      console.error('Error handling unknown callback query:', error);
    }
  }
});


bot.on('pre_checkout_query', paymentHandler.preCheckout);
bot.on('successful_payment', paymentHandler.successfulPayment);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏)
bot.on('text', handleAdminTextInput);


const app = express();

app.use(helmet());
app.use(cors());
app.use(express.json());


app.post('/webhook', (req, res) => {
  bot.handleUpdate(req.body);
  res.sendStatus(200);
});

app.get('/health', async (req, res) => {
  try {
    const botInfo = await bot.telegram.getMe();
    const { error } = await supabase.from('users').select('count').single();
    
    res.json({ 
      status: 'ok',
      bot: botInfo.username,
      database: error ? 'error' : 'ok',
      timestamp: new Date().toISOString(),
      scheduler_running: schedulerService?.isRunning || false
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'error', 
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

const PORT = process.env.PORT || 3000;

if (process.env.NODE_ENV === 'production') {
  bot.telegram.setWebhook(`${process.env.WEBHOOK_URL}/webhook`);
  
  app.listen(PORT, async () => {
    console.log(`üöÄ Server running on port ${PORT}`);
    console.log(`üì° Webhook URL: ${process.env.WEBHOOK_URL}/webhook`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await setupBotCommands();
    
    schedulerService.setBot(bot);
    schedulerService.start();
  });
} else {
  bot.launch(async () => {
    console.log('ü§ñ Bot started in polling mode');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await setupBotCommands();
    
    schedulerService.setBot(bot);
    schedulerService.start();
  });
  
  app.listen(PORT, () => {
    console.log(`üöÄ Dev server running on port ${PORT}`);
  });
}

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 