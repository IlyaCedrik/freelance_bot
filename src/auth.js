import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions/index.js";
import readline from "readline";
import fs from "fs";
import path from "path";
import telegramConfig from './config/telegram.js';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function updateConfigSession(sessionString) {
  const configPath = path.join(process.cwd(), 'src/config/telegram.js');
  let configContent = fs.readFileSync(configPath, 'utf8');
  
  const sessionRegex = /session:\s*['"][^'"]*['"]/;
  configContent = configContent.replace(sessionRegex, `session: '${sessionString}'`);
  
  fs.writeFileSync(configPath, configContent);
  console.log('‚úÖ Session —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª');
}

async function authenticate() {
  console.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram...");
  
  const stringSession = new StringSession("");
  const client = new TelegramClient(stringSession, telegramConfig.apiId, telegramConfig.apiHash, {
    connectionRetries: 5,
  });

  await client.start({
    phoneNumber: async () =>
      new Promise((resolve) =>
        rl.question("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", resolve)
      ),
    password: async () =>
      new Promise((resolve) =>
        rl.question("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è): ", resolve)
      ),
    phoneCode: async () =>
      new Promise((resolve) =>
        rl.question("üì® –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: ", resolve)
      ),
    onError: (err) => console.log("‚ùå –û—à–∏–±–∫–∞:", err),
  });

  console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
  const sessionString = client.session.save();
  console.log("üîë Session string:", sessionString);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º session –≤ –∫–æ–Ω—Ñ–∏–≥
  updateConfigSession(sessionString);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ
  try {
    await client.sendMessage("me", { message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ." });
    console.log("üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
  } catch (error) {
    console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
  }

  await client.disconnect();
  rl.close();
  
  console.log("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  console.log("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run test:connection");
}

authenticate().catch(console.error); 