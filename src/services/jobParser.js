import telegramParser from './telegramParser.js';

class JobParser {
  async parseAll() {
    try {
      const startTime = new Date();
      console.log(`üîÑ Starting Telegram job parsing at ${startTime.toLocaleString('ru-RU')}...`);
      
      const totalJobs = await this.parseTelegram();
      
      const endTime = new Date();
      const duration = Math.round((endTime - startTime) / 1000);
      console.log(`üìä Total jobs parsed: ${totalJobs} in ${duration}s`);
      return totalJobs;
    } catch (error) {
      console.error('Job parsing error:', error);
      throw error;
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  async parseAllWithNotifications(bot, userSubscriptions) {
    try {
      const startTime = new Date();
      console.log(`üîÑ Starting Telegram job parsing with notifications at ${startTime.toLocaleString('ru-RU')}...`);
      
      const totalJobs = await this.parseTelegramWithNotifications(bot, userSubscriptions);
      
      const endTime = new Date();
      const duration = Math.round((endTime - startTime) / 1000);
      console.log(`üìä Total jobs parsed and sent: ${totalJobs} in ${duration}s`);
      return totalJobs;
    } catch (error) {
      console.error('Job parsing with notifications error:', error);
      return 0;
    }
  }

  async parseTelegram() {
    try {
      const initialized = await telegramParser.init();
      
      if (!initialized) {
        console.log('‚ö†Ô∏è Telegram parser not initialized - skipping');
        return 0;
      }

      const totalJobs = await telegramParser.parseAllChannels();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—è–≥–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await telegramParser.softDisconnect();
      
      return totalJobs;
    } catch (error) {
      console.error('Telegram parsing error:', error);
      return 0;
    }
  }

  async parseTelegramWithNotifications(bot, userSubscriptions) {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bot instance –∏ –ø–æ–¥–ø–∏—Å–∫–∏
      telegramParser.setBotAndSubscriptions(bot, userSubscriptions);
      
      const initialized = await telegramParser.init();
      
      if (!initialized) {
        console.log('‚ö†Ô∏è Telegram parser not initialized - skipping');
        return 0;
      }

      const totalJobs = await telegramParser.parseAllChannels();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—è–≥–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
      await telegramParser.softDisconnect();
      
      return totalJobs;
    } catch (error) {
      console.error('Telegram parsing with notifications error:', error);
      // –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      try {
        await telegramParser.disconnect();
      } catch (disconnectError) {
        console.error('Error during disconnect:', disconnectError);
      }
      return 0;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async forceReconnect() {
    try {
      console.log('üîÑ Forcing Telegram reconnection...');
      await telegramParser.disconnect();
      await telegramParser.init();
      console.log('‚úÖ Force reconnection completed');
    } catch (error) {
      console.error('‚ùå Force reconnection failed:', error);
    }
  }
}

export default new JobParser(); 