import MessageFormatter from './messageFormatter.js';

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @readonly
 * @enum {number}
 */
const DELAYS = {
  /** –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–º—Å) */
  BETWEEN_USERS: 50,
};

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
 * 
 * @class NotificationService
 * @description –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
 * - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
 * - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 * - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
class NotificationService {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä NotificationService
   */
  constructor() {
    /** @type {import('telegraf').Telegraf|null} */
    this.bot = null;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   * 
   * @param {import('telegraf').Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegraf –±–æ—Ç–∞
   * @throws {Error} –ï—Å–ª–∏ bot –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Telegraf
   */
  setBot(bot) {
    this.bot = bot;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * 
   * @param {Object} jobData - –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
   * @param {string} jobData.category_name - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞
   * @param {string} jobData.url - –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞
   * @param {Object} jobData.message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} jobData.message.message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Array} [jobData.message.entities] - Telegram entities –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * 
   * @param {Array<Object>} subscribedUsers - –ú–∞—Å—Å–∏–≤ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @param {Object} subscribedUsers[].user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} subscribedUsers[].user.telegram_id - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 
   * @returns {Promise<number>} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @throws {Error} –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
   * 
   * @example
   * const sentCount = await notificationService.sendJobToSubscribers(
   *   {
   *     category_name: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
   *     url: 'https://t.me/freelance_channel/123',
   *     message: { 
   *       message: '–ù—É–∂–µ–Ω React —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
   *       entities: []
   *     }
   *   },
   *   [{ user: { telegram_id: 123456789 } }]
   * );
   */
  async sendJobToSubscribers(jobData, subscribedUsers) {
    if (!this.bot) {
      throw new Error('Bot instance not set');
    }

    let sentCount = 0;

    for (const subscription of subscribedUsers) {
      try {
        await this._sendJobMessage(subscription, jobData);
        sentCount++;
        await this._sleep(DELAYS.BETWEEN_USERS);
      } catch (error) {
        if (error.response?.error_code !== 403) {
          console.error(`Error sending to user ${subscription.user.telegram_id}:`, error.message);
        }
      }
    }

    return sentCount;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ–± –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
   * 
   * @param {number|string} telegramId - Telegram ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
   * @param {Object} promoCode - –û–±—ä–µ–∫—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
   * @param {string} promoCode.code - –ö–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
   * @param {number} promoCode.usage_count - –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
   * @param {number} [promoCode.usage_limit] - –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
   * @param {number} [promoCode.bonus_days=0] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π
   * @param {number} [promoCode.discount_percent=0] - –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
   * @param {string} userName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥
   * 
   * @returns {Promise<void>}
   * 
   * @example
   * await notificationService.sendPromoCodeUsageNotification(
   *   123456789,
   *   {
   *     code: 'SAVE20',
   *     usage_count: 5,
   *     usage_limit: 10,
   *     bonus_days: 7,
   *     discount_percent: 20
   *   },
   *   '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'
   * );
   */
  async sendPromoCodeUsageNotification(telegramId, promoCode, userName) {
    if (!this.bot) {
      console.error('Bot instance not set for promo code notification');
      return;
    }

    try {
      const bonusText = promoCode.bonus_days > 0 ? ` (+${promoCode.bonus_days} –¥–Ω–µ–π)` : '';
      const discountText = promoCode.discount_percent > 0 ? ` (—Å–∫–∏–¥–∫–∞ ${promoCode.discount_percent}%)` : '';

      const notificationMessage = `
üéâ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!

üé´ –ü—Ä–æ–º–æ–∫–æ–¥: ${promoCode.code}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}
üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promoCode.usage_count + 1}${promoCode.usage_limit ? `/${promoCode.usage_limit}` : ''}

üíé –ë–æ–Ω—É—Å—ã –ø—Ä–æ–º–æ–∫–æ–¥–∞:${bonusText}${discountText}

üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –º–æ–∂–Ω–æ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.
      `;

      await this.bot.telegram.sendMessage(telegramId, notificationMessage.trim());
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * 
   * @param {number|string} telegramId - Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
   * @param {string} message - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * 
   * @returns {Promise<void>}
   * @throws {Error} –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
   * @throws {Error} –ï—Å–ª–∏ Telegram ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
   * @throws {Error} –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * 
   * @example
   * await notificationService.sendAdminNotification(
   *   123456789,
   *   '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
   * );
   */
  async sendAdminNotification(telegramId, message) {
    if (!this.bot) {
      const errorMsg = 'Bot instance not set for admin notification';
      console.error('‚ùå', errorMsg);
      throw new Error(errorMsg);
    }

    if (!telegramId) {
      const errorMsg = 'Telegram ID not provided for admin notification';
      console.error('‚ùå', errorMsg);
      throw new Error(errorMsg);
    }

    try {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ ${telegramId}`);
      await this.bot.telegram.sendMessage(telegramId, message.trim());
      console.log(`‚úÖ –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${telegramId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${telegramId}:`, error.message || error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * 
   * @private
   * @param {Object} subscription - –û–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} subscription.user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} subscription.user.telegram_id - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} jobData - –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
   * @param {string} jobData.category_name - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞
   * @param {string} jobData.url - –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞
   * @param {Object} jobData.message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} jobData.message.message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Array} [jobData.message.entities] - Telegram entities –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * 
   * @returns {Promise<void>}
   * @throws {Error} –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async _sendJobMessage(subscription, jobData) {
    const htmlText = MessageFormatter.convertToHTML({
      message: jobData.message.message,
      entities: jobData.message.entities || []
    });

    await this.bot.telegram.sendMessage(
      subscription.user.telegram_id,
      MessageFormatter.formatJobMessage({
        category_name: jobData.category_name,
        url: jobData.url,
        text: htmlText,
      }),
      { 
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      }
    );
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
   * 
   * @private
   * @param {number} ms - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
   * @returns {Promise<void>} Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
   * 
   * @example
   * await this._sleep(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
   */
  _sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

/**
 * –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (Singleton)
 * @type {NotificationService}
 */
export default new NotificationService();