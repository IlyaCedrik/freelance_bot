/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å–æ–æ–±—â–µ–Ω–∏–π
 */
class MessageFormatter {
  constructor() {}

  formatJobMessage(jobData) {


    const messagePrefix = `üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑

üìÇ ${jobData.category_name || ''}

üìã ${jobData.text}

üîó <a href="${jobData.url || ''}">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É</a>`;
    

    return messagePrefix;
  }

  _adjustEntitiesOffset(entities, offset) {
    if (!entities || !Array.isArray(entities) || entities.length === 0) {
      return [];
    }

    const adjustedEntities = [];
    
    for (const entity of entities) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å entity
      if (this._isValidEntity(entity)) {
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è entity –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ offset
        adjustedEntities.push({
          ...entity,
          offset: entity.offset + offset
        });
      }
    }

    return adjustedEntities;
  }


  _isValidEntity(entity) {
    if (!entity || typeof entity !== 'object') {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö entities —Å –ø–æ–ª–µ–º type)
    if (typeof entity.type === 'string' && 
        typeof entity.offset === 'number' && 
        typeof entity.length === 'number') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      if (entity.offset < 0 || entity.length <= 0) {
        console.warn('Invalid entity values:', entity);
        return false;
      }
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram entities —Å –ø–æ–ª–µ–º className
    if (typeof entity.className === 'string' && 
        typeof entity.offset === 'number' && 
        typeof entity.length === 'number') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      if (entity.offset < 0 || entity.length <= 0) {
        console.warn('Invalid entity values:', entity);
        return false;
      }
      return true;
    }
    
    console.warn('Invalid entity structure:', entity);
    return false;
  }

  filterValidEntities(entities) {
    if (!entities || !Array.isArray(entities)) {
      return [];
    }

    return entities.filter(entity => this._isValidEntity(entity));
  }

  convertToPlainText(text, entities = []) {
    // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
    return text || '';
  }

  // –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π Telegram entity —Ç–∏–ø–æ–≤ –∫ HTML —Ç–µ–≥–∞–º
  _entityToHtmlMap = {
    'MessageEntityBold': (text) => `<b>${text}</b>`,
    'MessageEntityItalic': (text) => `<i>${text}</i>`,
    'MessageEntityCode': (text) => `<code>${text}</code>`,
    'MessageEntityPre': (text) => `<pre>${text}</pre>`,
    'MessageEntityStrike': (text) => `<s>${text}</s>`,
    'MessageEntityUnderline': (text) => `<u>${text}</u>`,
    'MessageEntityHashtag': (text) => `<b>${text}</b>`,
    'MessageEntityTextUrl': (text, entity) => `<a href="${entity.url || ''}">${text}</a>`,
    'MessageEntityUrl': (text) => `<a href="${text}">${text}</a>`,
    'MessageEntityMention': (text) => `<a href="https://t.me/${text.replace('@', '')}">${text}</a>`
  };

  convertToHTML(messageObj) {
    if (!messageObj || !messageObj.message) {
      return '';
    }

    const { message: text, entities = [] } = messageObj;
    
    if (!text) {
      return '';
    }

    if (entities.length === 0) {
      return this._escapeHTML(text);
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ entities –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ offset –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const validEntities = entities
      .filter(entity => this._isValidTelegramEntity(entity))
      .sort((a, b) => b.offset - a.offset);

    let result = text;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º entities –æ—Ç –∫–æ–Ω—Ü–∞ –∫ –Ω–∞—á–∞–ª—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å —Å–º–µ—â–µ–Ω–∏—è
    for (const entity of validEntities) {
      const { offset, length, className } = entity;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç entity
      const entityText = text.substring(offset, offset + length);
      const escapedText = this._escapeHTML(entityText);
      
      // –ü–æ–ª—É—á–∞–µ–º HTML –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ entity
      const htmlWrapper = this._entityToHtmlMap[className];
      
      let replacement;
      if (htmlWrapper) {
        replacement = htmlWrapper(escapedText, entity);
      } else {
        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ—Å—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
        replacement = escapedText;
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
      result = result.substring(0, offset) + replacement + result.substring(offset + length);
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è HTML —Å–∏–º–≤–æ–ª—ã –≤ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç—è—Ö
    return this._escapeHTMLSimple(result);
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã
   * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {string} - –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  _escapeHTML(text) {
    if (!text) return '';
    
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤ –≤–Ω–µ —Ç–µ–≥–æ–≤
   * @param {string} text - –¢–µ–∫—Å—Ç —Å HTML —Ç–µ–≥–∞–º–∏
   * @returns {string} - –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  _escapeHTMLSimple(text) {
    if (!text) return '';
    
    let result = '';
    let inTag = false;
    
    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      
      if (char === '<') {
        inTag = true;
        result += char;
      } else if (char === '>') {
        inTag = false;
        result += char;
      } else if (!inTag && char === '&' && !this._isEscapedChar(text, i)) {
        result += '&amp;';
      } else {
        result += char;
      }
    }
    
    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª & —É–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
   * @param {string} text - –í–µ—Å—å —Ç–µ–∫—Å—Ç
   * @param {number} index - –ò–Ω–¥–µ–∫—Å —Å–∏–º–≤–æ–ª–∞ &
   * @returns {boolean} - true –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª —É–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω
   */
  _isEscapedChar(text, index) {
    const remaining = text.substring(index);
    return remaining.startsWith('&amp;') || 
           remaining.startsWith('&lt;') || 
           remaining.startsWith('&gt;');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Telegram entity
   * @param {Object} entity - Entity –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean} - true –µ—Å–ª–∏ entity –≤–∞–ª–∏–¥–Ω—ã–π
   */
  _isValidTelegramEntity(entity) {
    if (!entity || typeof entity !== 'object') {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Telegram entities
    if (typeof entity.className !== 'string' || 
        typeof entity.offset !== 'number' || 
        typeof entity.length !== 'number') {
      console.warn('Invalid Telegram entity structure:', entity);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (entity.offset < 0 || entity.length <= 0) {
      console.warn('Invalid Telegram entity values:', entity);
      return false;
    }
    
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ entities
   * @param {Object} message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {boolean} - true –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ entities
   */
  hasValidEntities(message) {
    if (!message || !message.entities) {
      return false;
    }

    return this.filterValidEntities(message.entities).length > 0;
  }

  getEntitiesStats(entities) {
    if (!entities || !Array.isArray(entities)) {
      return { total: 0, valid: 0, invalid: 0, types: {} };
    }

    const stats = {
      total: entities.length,
      valid: 0,
      invalid: 0,
      types: {}
    };

    entities.forEach(entity => {
      if (this._isValidEntity(entity)) {
        stats.valid++;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º className –¥–ª—è Telegram entities –∏–ª–∏ type –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö
        const entityType = entity.className || entity.type;
        stats.types[entityType] = (stats.types[entityType] || 0) + 1;
      } else {
        stats.invalid++;
      }
    });

    return stats;
  }
}

export default new MessageFormatter(); 