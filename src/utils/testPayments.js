import 'dotenv/config';
import { Telegraf } from 'telegraf';
import { supabase } from '../config/supabase.js';

async function testPaymentSetup() {
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π...\n');

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN
  console.log('1. ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞:');
  const botToken = process.env.BOT_TOKEN;
  
  if (!botToken) {
    console.log('   ‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return false;
  }
  console.log(`   ‚úÖ BOT_TOKEN: ${botToken.substring(0, 20)}...`);

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º TELEGRAM_PAYMENT_TOKEN
  console.log('\n2. üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–µ–π:');
  const paymentToken = process.env.TELEGRAM_PAYMENT_TOKEN;
  
  if (!paymentToken) {
    console.log('   ‚ùå TELEGRAM_PAYMENT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return false;
  }
  
  if (paymentToken === 'test_payment_token') {
    console.log('   ‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    return false;
  }
  
  console.log(`   ‚úÖ Payment Token: ${paymentToken.substring(0, 30)}...`);
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
  if (!paymentToken.includes(':')) {
    console.log('   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ":")');
    return false;
  }
  
  const parts = paymentToken.split(':');
  console.log(`   üìã –ß–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞: ${parts.length} —á–∞—Å—Ç–µ–π`);
  console.log(`   üß™ –¢–µ—Å—Ç–æ–≤—ã–π: ${paymentToken.includes('TEST') ? '–î–∞' : '–ù–µ—Ç'}`);

  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
  console.log('\n3. üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:');
  try {
    const bot = new Telegraf(botToken);
    const botInfo = await bot.telegram.getMe();
    console.log(`   ‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @${botInfo.username}`);
    console.log(`   üìä ID: ${botInfo.id}`);
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error.message);
    return false;
  }

  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  console.log('\n4. üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  try {
    const { data: categories, error } = await supabase
      .from('categories')
      .select('id, name, price')
      .eq('is_active', true)
      .limit(1);

    if (error) throw error;
    
    if (!categories || categories.length === 0) {
      console.log('   ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      return false;
    }
    
    const category = categories[0];
    console.log(`   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${category.name}`);
    console.log(`   üí∞ –¶–µ–Ω–∞: ${category.price} –∫–æ–ø–µ–µ–∫ (${(category.price/100).toFixed(2)}‚ÇΩ)`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
    if (category.price <= 0) {
      console.log('   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      return false;
    }
    
    if (category.price < 6000) { // –ú–∏–Ω–∏–º—É–º 60 —Ä—É–±–ª–µ–π –¥–ª—è Telegram
      console.log('   ‚ö†Ô∏è –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–π –¥–ª—è Telegram Payments (–º–∏–Ω. 60‚ÇΩ)');
    }

  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return false;
  }

  // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ invoice data
  console.log('\n5. üìÑ –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–∞:');
  try {
    const testInvoiceData = {
      title: '–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∞',
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏',
      payload: 'test_payment_123',
      provider_token: paymentToken,
      currency: 'RUB',
      prices: [{
        label: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
        amount: 50000 // 500 —Ä—É–±–ª–µ–π
      }],
      need_email: false,
      need_phone_number: false,
      is_flexible: false
    };

    console.log('   üìã –î–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞:');
    console.log('   ', JSON.stringify(testInvoiceData, null, 4));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const requiredFields = ['title', 'description', 'payload', 'provider_token', 'currency', 'prices'];
    const missingFields = requiredFields.filter(field => !testInvoiceData[field]);
    
    if (missingFields.length > 0) {
      console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${missingFields.join(', ')}`);
      return false;
    }
    
    console.log('   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');

  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–∞:', error.message);
    return false;
  }

  console.log('\n‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: npm run dev');
  console.log('2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ Telegram');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏');
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
async function testSpecificPayment() {
  console.log('\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...\n');
  
  try {
    const bot = new Telegraf(process.env.BOT_TOKEN);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const { data: categories, error } = await supabase
      .from('categories')
      .select('*')
      .eq('is_active', true)
      .limit(1);

    if (error || !categories.length) {
      console.log('‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const category = categories[0];
    console.log(`üìÇ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category.name}`);
    console.log(`üí∞ –¶–µ–Ω–∞: ${(category.price/100).toFixed(2)}‚ÇΩ`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
    const { data: payment, error: paymentError } = await supabase
      .from('payments')
      .insert([{
        user_id: 'test_user_id',
        category_id: category.id,
        amount: category.price,
        currency: 'RUB',
        status: 'pending'
      }])
      .select()
      .single();

    if (paymentError) throw paymentError;

    console.log(`üíæ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: ${payment.id}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ Telegram API
    const testChatId = '123456789'; // –§–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
    
    const invoiceData = {
      chat_id: testChatId,
      title: `–ü–æ–¥–ø–∏—Å–∫–∞: ${category.name}`,
      description: `–î–æ—Å—Ç—É–ø –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}" –Ω–∞ 30 –¥–Ω–µ–π`,
      payload: payment.id.toString(),
      provider_token: process.env.TELEGRAM_PAYMENT_TOKEN,
      currency: 'RUB',
      prices: JSON.stringify([{
        label: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü',
        amount: category.price
      }]),
      need_email: false,
      need_phone_number: false,
      is_flexible: false
    };

    console.log('\nüì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram API:');
    console.log(JSON.stringify(invoiceData, null, 2));

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    await supabase
      .from('payments')
      .delete()
      .eq('id', payment.id);

    console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —É–¥–∞–ª–µ–Ω');
    console.log('\nüí° –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏,');
    console.log('   –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å');

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error.message);
    if (error.response) {
      console.log('üì° –û—Ç–≤–µ—Ç API:', error.response.data);
    }
  }
}

async function main() {
  try {
    const basicCheck = await testPaymentSetup();
    
    if (basicCheck) {
      await testSpecificPayment();
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { testPaymentSetup }; 