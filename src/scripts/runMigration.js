#!/usr/bin/env node

import 'dotenv/config';
import ExistingUsersMigration from '../database/migrations/migrateExistingUsers.js';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node src/scripts/runMigration.js [–∫–æ–º–∞–Ω–¥–∞]
 * 
 * –ö–æ–º–∞–Ω–¥—ã:
 * migrate        - –ú–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
 * validate       - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
 * rollback       - –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
 * single <id>    - –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
 */

async function main() {
  const args = process.argv.slice(2);
  const command = args[0] || 'migrate';

  console.log('ü§ñ Freelance Bot - –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
  console.log('================================================\n');

  try {
    switch (command) {
      case 'migrate':
        console.log('üìã –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...');
        await ExistingUsersMigration.migrateAllUsers();
        break;

      case 'validate':
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...');
        await ExistingUsersMigration.validateMigration();
        break;

      case 'rollback':
        console.log('‚ö†Ô∏è –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');
        const confirm = await askConfirmation('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ');
        if (confirm) {
          await ExistingUsersMigration.rollbackMigration();
        } else {
          console.log('‚ùå –û—Ç–∫–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω');
        }
        break;

      case 'single':
        const telegramId = args[1];
        if (!telegramId) {
          console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          console.error('–ü—Ä–∏–º–µ—Ä: node src/scripts/runMigration.js single 123456789');
          process.exit(1);
        }
        console.log(`üë§ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}...`);
        await ExistingUsersMigration.migrateSingleUser(parseInt(telegramId));
        break;

      default:
        console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', command);
        console.error('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: migrate, validate, rollback, single <telegram_id>');
        process.exit(1);
    }

    console.log('\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);

  } catch (error) {
    console.error('\nüí• –û—à–∏–±–∫–∞:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
function askConfirmation(question) {
  return new Promise((resolve) => {
    process.stdout.write(question);
    process.stdin.setEncoding('utf8');
    
    process.stdin.once('data', (data) => {
      const answer = data.toString().trim().toLowerCase();
      resolve(answer === 'y' || answer === 'yes');
    });
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\n\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
main(); 