import 'dotenv/config';
import jobParser from './services/jobParser.js';
import User from './database/models/User.js';

// Mock bot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const mockBot = {
  telegram: {
    sendMessage: async (chatId, message, options) => {
      console.log(`üì§ Sending notification to user ${chatId}:`);
      console.log('---');
      console.log(message);
      console.log('---\n');
      return { message_id: Math.random() };
    }
  }
};

async function runParserWithNotifications() {
  try {
    console.log('üöÄ Starting manual parser run with notifications...\n');
    
    console.log('üìä Step 1: Getting active subscribers...');
    const activeUsers = await User.getActiveSubscribers();
    console.log(`üë• Found ${activeUsers.length} active subscribers`);

    if (activeUsers.length === 0) {
      console.log('‚ÑπÔ∏è No active subscribers found, running parser without notifications');
      await runParserOnly();
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
    const userSubscriptions = prepareUserSubscriptions(activeUsers);
    console.log(`üìã Prepared ${userSubscriptions.length} subscription mappings\n`);

    console.log('üìä Step 2: Running parser with notifications...');
    const totalJobs = await jobParser.parseAllWithNotifications(mockBot, userSubscriptions);
    console.log(`‚úÖ Parsing completed: ${totalJobs} jobs found and sent\n`);
    
    console.log('üéâ Manual parser run with notifications completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error during parser run:', error);
    process.exit(1);
  }
}

// –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–µ—Ä–∞ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function runParserOnly() {
  try {
    console.log('üîÑ Running parser only (no notifications)...');
    const totalJobs = await jobParser.parseAll();
    console.log(`‚úÖ Parser completed: ${totalJobs} new jobs found`);
  } catch (error) {
    console.error('‚ùå Parser error:', error);
    process.exit(1);
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function testNotificationsOnly() {
  try {
    console.log('üß™ Testing notifications with mock data...\n');
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const mockUserSubscriptions = [
      {
        user: { telegram_id: 123456789, username: 'testuser1', first_name: 'Test' },
        category_id: 'web',
        category_name: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        is_active: true
      },
      {
        user: { telegram_id: 987654321, username: 'testuser2', first_name: 'User' },
        category_id: 'design',
        category_name: '–î–∏–∑–∞–π–Ω',
        is_active: true
      }
    ];

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TelegramParser –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { default: telegramParser } = await import('./services/telegramParser.js');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const mockJobData = {
      title: '–ù—É–∂–µ–Ω –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞',
      budget_min: 50000,
      budget_max: 100000,
      currency: 'RUB',
      category_name: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      url: 'https://t.me/freelancechannel/123'
    };

    console.log('üìù Testing message formatting:');
    const formattedMessage = telegramParser.formatJobMessage(mockJobData);
    console.log(formattedMessage);
    console.log('\n---\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    telegramParser.setBotAndSubscriptions(mockBot, mockUserSubscriptions);
    const sentCount = await telegramParser.sendJobToSubscribers(mockJobData);
    
    console.log(`‚úÖ Mock notifications sent to ${sentCount} users`);
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
function prepareUserSubscriptions(activeUsers) {
  const subscriptions = [];
  
  for (const user of activeUsers) {
    for (const subscription of user.subscriptions) {
      // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
      const categoryMapping = {
        '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': 'web',
        '–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': 'mobile', 
        '–î–∏–∑–∞–π–Ω': 'design',
        '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥': 'copywriting',
        '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': 'marketing',
        '–ü–µ—Ä–µ–≤–æ–¥—ã': 'translation'
      };

      const mappedCategoryId = categoryMapping[subscription.categories.name] || 'other';

      subscriptions.push({
        user: {
          telegram_id: user.telegram_id,
          username: user.username,
          first_name: user.first_name
        },
        category_id: mappedCategoryId,
        category_name: subscription.categories.name,
        is_active: subscription.is_active && 
                  new Date(subscription.expires_at) > new Date()
      });
    }
  }
  
  return subscriptions;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

if (command === 'parse-only') {
  runParserOnly();
} else if (command === 'test-notifications') {
  testNotificationsOnly();
} else {
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  runParserWithNotifications();
} 