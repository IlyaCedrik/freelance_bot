import User from '../../database/models/User.js';
import Subscription from '../../database/models/Subscription.js';
import messageManager from '../utils/messageManager.js';
import { profileKeyboard, userStatsKeyboard } from '../keyboards/profile.js';

const showProfile = async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    if (!user) {
      return messageManager.sendMessage(ctx, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const subscriptions = await Subscription.getUserSubscriptions(user.id);
    const activeSubscriptions = subscriptions.filter(sub => 
      new Date(sub.expires_at) > new Date()
    );

    const registrationDate = new Date(user.created_at).toLocaleDateString('ru-RU');
    const lastActivity = new Date(user.last_activity).toLocaleDateString('ru-RU');

    const message = `
üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üëã ${user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
üÜî ID: ${user.telegram_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${registrationDate}
‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity}

üìä –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${activeSubscriptions.length}
üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${(user.referral_balance / 100).toFixed(0)}‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `;

    if (ctx.callbackQuery) {
      await messageManager.editMessage(ctx, message, profileKeyboard);
    } else {
      await messageManager.sendMessage(ctx, message, profileKeyboard);
    }
  } catch (error) {
    console.error('Profile error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
  }
};

const showUserStats = async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    const subscriptions = await Subscription.getUserSubscriptions(user.id);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    const totalSubscriptions = subscriptions.length;
    const activeSubscriptions = subscriptions.filter(sub => 
      new Date(sub.expires_at) > new Date()
    ).length;
    const expiredSubscriptions = totalSubscriptions - activeSubscriptions;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoriesStats = subscriptions.reduce((acc, sub) => {
      const categoryName = sub.categories.name;
      if (!acc[categoryName]) {
        acc[categoryName] = { total: 0, active: 0 };
      }
      acc[categoryName].total++;
      if (new Date(sub.expires_at) > new Date()) {
        acc[categoryName].active++;
      }
      return acc;
    }, {});

    let categoriesText = '';
    if (Object.keys(categoriesStats).length > 0) {
      categoriesText = Object.entries(categoriesStats)
        .map(([name, stats]) => `‚Ä¢ ${name}: ${stats.active}/${stats.total}`)
        .join('\n');
    } else {
      categoriesText = '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫';
    }

    const message = `
üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìà –ü–æ–¥–ø–∏—Å–∫–∏:
‚Ä¢ –í—Å–µ–≥–æ: ${totalSubscriptions}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeSubscriptions}
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: ${expiredSubscriptions}

üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
${categoriesText}

üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${(user.referral_balance / 100).toFixed(0)}‚ÇΩ
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.active_referrals_count || 0}

üìÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleDateString('ru-RU')}
    `;

    await messageManager.editMessage(ctx, message, userStatsKeyboard);
  } catch (error) {
    console.error('User stats error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
};

export default {
  showProfile,
  showUserStats
}; 