import User from '../../database/models/User.js';
import Category from '../../database/models/Category.js';
import ParsingChannel from '../../database/models/ParsingChannel.js';
import { supabase } from '../../config/supabase.js';
import { 
  adminMainKeyboard, 
  channelManagementKeyboard,
  categoryManagementKeyboard,
  userManagementKeyboard,
  channelStatusKeyboard,
  categoryListKeyboard,
  channelActionKeyboard,
  confirmDeleteKeyboard,
  backToAdminKeyboard
} from '../keyboards/admin.js';

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
export const requireAdmin = async (ctx, next) => {
  try {
    const isAdmin = await User.isAdmin(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }
    
    await next();
  } catch (error) {
    console.error('Error checking admin permissions:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
  }
};

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
export const showAdminPanel = async (ctx) => {
  try {
    const messageText = `
üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –±–æ—Ç–∞:

üì∫ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏** - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
üìù **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏** - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–∫–∞–∑–æ–≤
üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏** - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π
üí∞ **–ü–ª–∞—Ç–µ–∂–∏** - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
`;

    if (ctx.callbackQuery) {
      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        reply_markup: adminMainKeyboard().reply_markup
      });
    } else {
      await ctx.reply(messageText, {
        parse_mode: 'Markdown',
        reply_markup: adminMainKeyboard().reply_markup
      });
    }
  } catch (error) {
    console.error('Error showing admin panel:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
  }
};

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò ===

export const showChannelManagement = async (ctx) => {
  try {
    const messageText = `
üì∫ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞**

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏, –æ—Ç–∫—É–¥–∞ –±–æ—Ç –ø–∞—Ä—Å–∏—Ç –∑–∞–∫–∞–∑—ã:

‚ûï **–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª** - –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
üìã **–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤** - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
üîç **–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞** - –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ username
üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª** - –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª –æ—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

    await ctx.editMessageText(messageText, {
      parse_mode: 'Markdown',
      reply_markup: channelManagementKeyboard().reply_markup
    });
  } catch (error) {
    console.error('Error showing channel management:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏');
  }
};

export const listChannels = async (ctx) => {
  try {
    const channels = await ParsingChannel.getAll();
    
    if (channels.length === 0) {
      await ctx.editMessageText(`
üì∫ **–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞**

‚ùå –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
`, {
        parse_mode: 'Markdown',
        reply_markup: channelManagementKeyboard().reply_markup
      });
      return;
    }

    const messageText = `
üì∫ **–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞** (${channels.length})

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
`;

    await ctx.editMessageText(messageText, {
      parse_mode: 'Markdown',
      reply_markup: channelStatusKeyboard(channels).reply_markup
    });
  } catch (error) {
    console.error('Error listing channels:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤');
  }
};

export const showChannelDetails = async (ctx) => {
  try {
    const channelId = ctx.match[1];
    const channel = await ParsingChannel.findById(channelId);
    
    if (!channel) {
      await ctx.answerCbQuery('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const keywords = channel.keywords.join(', ') || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã';
    const lastParsed = channel.last_parsed_at 
      ? new Date(channel.last_parsed_at).toLocaleString('ru-RU') 
      : '–ù–∏–∫–æ–≥–¥–∞';

    const messageText = `
üì∫ **–î–µ—Ç–∞–ª–∏ –∫–∞–Ω–∞–ª–∞**

**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${channel.name}
**Username:** @${channel.username}
**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${channel.categories.name}
**–°—Ç–∞—Ç—É—Å:** ${channel.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** ${keywords}
**–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥:** ${lastParsed}
**–°–æ–∑–¥–∞–Ω:** ${new Date(channel.created_at).toLocaleString('ru-RU')}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

    await ctx.editMessageText(messageText, {
      parse_mode: 'Markdown',
      reply_markup: channelActionKeyboard(channelId).reply_markup
    });
  } catch (error) {
    console.error('Error showing channel details:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–∞–Ω–∞–ª–∞');
  }
};

export const startAddChannel = async (ctx) => {
  try {
    await ctx.editMessageText(`
‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞**

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

\`\`\`
–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@username_–∫–∞–Ω–∞–ª–∞
–∫–∞—Ç–µ–≥–æ—Ä–∏—è_slug
–∫–ª—é—á–µ–≤—ã–µ,—Å–ª–æ–≤–∞,—á–µ—Ä–µ–∑,–∑–∞–ø—è—Ç—É—é
\`\`\`

**–ü—Ä–∏–º–µ—Ä:**
\`\`\`
Freelance Jobs
@freelancejobs
web-development
—Å–∞–π—Ç,–≤–µ–±,website,html,css,javascript
\`\`\`

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞:
`, {
      parse_mode: 'Markdown',
      reply_markup: backToAdminKeyboard().reply_markup
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞
    ctx.session = ctx.session || {};
    ctx.session.awaitingChannelData = true;
  } catch (error) {
    console.error('Error starting add channel:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞');
  }
};

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ===

export const showCategoryManagement = async (ctx) => {
  try {
    const messageText = `
üìù **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏**

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞–∫–∞–∑–æ–≤:

‚ûï **–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é** - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
üìã **–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π** - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é** - –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é** - —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

    await ctx.editMessageText(messageText, {
      parse_mode: 'Markdown',
      reply_markup: categoryManagementKeyboard().reply_markup
    });
  } catch (error) {
    console.error('Error showing category management:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏');
  }
};

export const listCategories = async (ctx) => {
  try {
    const categories = await Category.getAll();
    
    if (categories.length === 0) {
      await ctx.editMessageText(`
üìù **–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π**

‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
`, {
        parse_mode: 'Markdown',
        reply_markup: categoryManagementKeyboard().reply_markup
      });
      return;
    }

    const messageText = `
üìù **–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π** (${categories.length})

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
`;

    await ctx.editMessageText(messageText, {
      parse_mode: 'Markdown',
      reply_markup: categoryListKeyboard(categories).reply_markup
    });
  } catch (error) {
    console.error('Error listing categories:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
  }
};

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

export const showUserManagement = async (ctx) => {
  try {
    const messageText = `
üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏:

üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** - –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ ID
üëë **–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞** - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

    await ctx.editMessageText(messageText, {
      parse_mode: 'Markdown',
      reply_markup: userManagementKeyboard().reply_markup
    });
  } catch (error) {
    console.error('Error showing user management:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
  }
};

export const startMakeAdmin = async (ctx) => {
  try {
    await ctx.editMessageText(`
üëë **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

**–ü—Ä–∏–º–µ—Ä—ã:**
- \`123456789\` (Telegram ID)
- \`@username\` (—Å —Å–∏–º–≤–æ–ª–æ–º @)

**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Telegram ID:**
1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot
2. –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ ID –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ username:
`, {
      parse_mode: 'Markdown',
      reply_markup: backToAdminKeyboard().reply_markup
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session = ctx.session || {};
    ctx.session.awaitingUserToMakeAdmin = true;
  } catch (error) {
    console.error('Error starting make admin:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞');
  }
};

export const listUsers = async (ctx) => {
  try {
    const { data: users, error } = await supabase
      .from('users')
      .select('telegram_id, username, first_name, last_name, role, is_active, created_at')
      .order('created_at', { ascending: false })
      .limit(20);

    if (error) throw error;

    if (users.length === 0) {
      await ctx.editMessageText(`
üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**

‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
`, {
        parse_mode: 'Markdown',
        reply_markup: userManagementKeyboard().reply_markup
      });
      return;
    }

    let messageText = `üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)\n\n`;
    
    users.forEach((user, index) => {
      const roleEmoji = user.role === 'admin' ? 'üëë' : user.role === 'moderator' ? 'üõ°Ô∏è' : 'üë§';
      const statusEmoji = user.is_active ? '‚úÖ' : '‚ùå';
      const name = user.first_name || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
      const username = user.username ? `@${user.username}` : '';
      
      messageText += `${index + 1}. ${roleEmoji} ${statusEmoji} **${name}** ${username}\n`;
      messageText += `   ID: \`${user.telegram_id}\`\n`;
      messageText += `   –†–æ–ª—å: ${user.role}\n\n`;
    });

    await ctx.editMessageText(messageText, {
      parse_mode: 'Markdown',
      reply_markup: userManagementKeyboard().reply_markup
    });
  } catch (error) {
    console.error('Error listing users:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π
export const handleAdminTextInput = async (ctx, next) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
  if (ctx.session?.awaitingChannelData) {
    return handleChannelData(ctx);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
  if (ctx.session?.awaitingUserToMakeAdmin) {
    return handleMakeAdminData(ctx);
  }
  
  // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
  return next();
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
const handleMakeAdminData = async (ctx) => {
  try {
    const input = ctx.message.text.trim();
    let targetUser = null;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ - ID –∏–ª–∏ username
    if (input.startsWith('@')) {
      // Username
      const username = input.substring(1);
      targetUser = await User.findByUsername(username);
      
      if (!targetUser) {
        await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username "@${username}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
          reply_markup: backToAdminKeyboard().reply_markup
        });
        return;
      }
    } else if (/^\d+$/.test(input)) {
      // Telegram ID
      const telegramId = parseInt(input);
      targetUser = await User.findByTelegramId(telegramId);
      
      if (!targetUser) {
        await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID "${telegramId}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
          reply_markup: backToAdminKeyboard().reply_markup
        });
        return;
      }
    } else {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID (—á–∏—Å–ª–∞) –∏–ª–∏ @username.`, {
        reply_markup: backToAdminKeyboard().reply_markup
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–æ–º
    if (targetUser.role === 'admin') {
      await ctx.reply(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`, {
        reply_markup: backToAdminKeyboard().reply_markup
      });
      ctx.session.awaitingUserToMakeAdmin = false;
      return;
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
    await User.setUserRole(targetUser.telegram_id, 'admin');

    const userName = targetUser.first_name || targetUser.username || `ID: ${targetUser.telegram_id}`;
    
    await ctx.reply(`‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!**

üëë **${userName}** —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É.
`, {
      parse_mode: 'Markdown',
      reply_markup: backToAdminKeyboard().reply_markup
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.awaitingUserToMakeAdmin = false;

  } catch (error) {
    console.error('Error making user admin:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      reply_markup: backToAdminKeyboard().reply_markup
    });
    ctx.session.awaitingUserToMakeAdmin = false;
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
const handleChannelData = async (ctx) => {
  if (!ctx.session?.awaitingChannelData) {
    return;
  }

  try {
    const lines = ctx.message.text.trim().split('\n');
    
    if (lines.length !== 4) {
      await ctx.reply(`
‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö**

–û–∂–∏–¥–∞–µ—Ç—Å—è 4 —Å—Ç—Ä–æ–∫–∏:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
2. @username –∫–∞–Ω–∞–ª–∞
3. Slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
4. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
`, {
        parse_mode: 'Markdown',
        reply_markup: backToAdminKeyboard().reply_markup
      });
      return;
    }

    const [name, usernameWithAt, categorySlug, keywordsStr] = lines;
    const username = usernameWithAt.replace('@', '');
    const keywords = keywordsStr.split(',').map(k => k.trim()).filter(k => k);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const category = await Category.findBySlug(categorySlug);
    if (!category) {
      await ctx.reply(`‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å slug "${categorySlug}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏".`, {
        reply_markup: backToAdminKeyboard().reply_markup
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º username
    const existingChannel = await ParsingChannel.findByUsername(username);
    if (existingChannel) {
      await ctx.reply(`‚ùå –ö–∞–Ω–∞–ª —Å username "@${username}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`, {
        reply_markup: backToAdminKeyboard().reply_markup
      });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
    const channelData = {
      category_id: category.id,
      name: name.trim(),
      username: username,
      keywords: keywords,
      is_active: true
    };

    const newChannel = await ParsingChannel.create(channelData);

    await ctx.reply(`
‚úÖ **–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**

**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${newChannel.name}
**Username:** @${newChannel.username}
**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${newChannel.categories.name}
**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** ${keywords.join(', ')}

–ö–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É.
`, {
      parse_mode: 'Markdown',
      reply_markup: backToAdminKeyboard().reply_markup
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.awaitingChannelData = false;

  } catch (error) {
    console.error('Error adding channel:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
      reply_markup: backToAdminKeyboard().reply_markup
    });
    ctx.session.awaitingChannelData = false;
  }
}; 