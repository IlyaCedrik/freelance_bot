import User from '../../database/models/User.js';
import Subscription from '../../database/models/Subscription.js';
import { supabase } from '../../config/supabase.js';
import { Markup } from 'telegraf';
import messageManager from '../utils/messageManager.js';

const showSettings = async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
      return messageManager.sendMessage(ctx, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    }

    const subscriptions = await Subscription.getUserSubscriptions(user.id);
    
    const settingsMessage = `
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞**

üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ ID: ${user.telegram_id}
‚Ä¢ –ò–º—è: ${user.first_name} ${user.last_name || ''}
‚Ä¢ Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –Ø–∑—ã–∫: ${user.language_code}
‚Ä¢ –ü–æ–¥–ø–∏—Å–æ–∫: ${subscriptions.length}

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
    `;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', 'show_subscriptions')],
      [Markup.button.callback('üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', 'show_privacy')],
      [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', 'export_data')],
      [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'delete_account_confirm')],
      [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
    if (ctx.callbackQuery) {
      // –ï—Å–ª–∏ —ç—Ç–æ callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º editMessage
      await messageManager.editMessage(ctx, settingsMessage, keyboard);
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º sendMessage
      await messageManager.sendMessage(ctx, settingsMessage, keyboard);
    }
  } catch (error) {
    console.error('Settings error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
};

const confirmDeleteAccount = async (ctx) => {
  const confirmMessage = `
‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**

–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ ‚ùå **–£–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ** (–ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π)
‚Ä¢ ‚ùå **–û—Ç–º–µ–Ω–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏**
‚Ä¢ ‚ùå **–ù–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å**

üí∞ **–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω**

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
  `;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'delete_account_final')],
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'settings')]
  ]);

  await messageManager.editMessage(ctx, confirmMessage, keyboard);
};

const deleteAccount = async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
      return messageManager.sendMessage(ctx, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏)
    const { error } = await supabase
      .from('users')
      .delete()
      .eq('telegram_id', ctx.from.id);

    if (error) throw error;

    const farewellMessage = `
‚úÖ **–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω**

–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã:
‚Ä¢ ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ ‚ùå –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ ‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ ‚ùå –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! 
–ï—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start

*–≠—Ç–æ—Ç —á–∞—Ç –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º.*
    `;

    await messageManager.editMessage(ctx, farewellMessage);
    
    console.log(`User account deleted: ${ctx.from.id}`);
  } catch (error) {
    console.error('Delete account error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
};

const exportUserData = async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
      return messageManager.sendMessage(ctx, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', ctx.from.id)
      .single();

    const { data: subscriptions, error: subsError } = await supabase
      .from('subscriptions')
      .select(`
        *,
        categories(name)
      `)
      .eq('user_id', user.id);

    const { data: payments, error: paymentsError } = await supabase
      .from('payments')
      .select('*')
      .eq('user_id', user.id);

    if (userError || subsError || paymentsError) {
      throw userError || subsError || paymentsError;
    }

    const exportData = {
      profile: {
        telegram_id: userData.telegram_id,
        username: userData.username,
        first_name: userData.first_name,
        last_name: userData.last_name,
        language_code: userData.language_code,
        created_at: userData.created_at,
        last_activity: userData.last_activity
      },
      subscriptions: subscriptions.map(sub => ({
        category: sub.categories.name,
        is_active: sub.is_active,
        expires_at: sub.expires_at,
        created_at: sub.created_at
      })),
      payments: payments.map(payment => ({
        amount: payment.amount,
        currency: payment.currency,
        status: payment.status,
        created_at: payment.created_at,
        completed_at: payment.completed_at
      }))
    };

    const exportMessage = `
üìä **–≠–∫—Å–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö**

**–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ ID: ${exportData.profile.telegram_id}
‚Ä¢ –ò–º—è: ${exportData.profile.first_name} ${exportData.profile.last_name || ''}
‚Ä¢ Username: @${exportData.profile.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(exportData.profile.created_at).toLocaleDateString('ru-RU')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${new Date(exportData.profile.last_activity).toLocaleDateString('ru-RU')}

**–ü–æ–¥–ø–∏—Å–∫–∏:** ${exportData.subscriptions.length}
${exportData.subscriptions.map(sub => 
  `‚Ä¢ ${sub.category} (${sub.is_active ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'})`
).join('\n')}

**–ü–ª–∞—Ç–µ–∂–∏:** ${exportData.payments.length}
${exportData.payments.map(payment => 
  `‚Ä¢ ${payment.amount/100}‚ÇΩ - ${payment.status} (${new Date(payment.created_at).toLocaleDateString('ru-RU')})`
).join('\n')}

üìã –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Ñ–∞–π–ª
    await ctx.replyWithDocument({
      source: Buffer.from(JSON.stringify(exportData, null, 2)),
      filename: `user_data_export_${ctx.from.id}_${new Date().toISOString().split('T')[0]}.json`
    });

    await messageManager.sendMessage(ctx, exportMessage);

  } catch (error) {
    console.error('Export data error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
  }
};

const showPrivacyPolicy = async (ctx) => {
  const privacyMessage = `
üîí **–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏**

–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º —Å–µ—Ä–≤–∏—Å–æ–º –∏ –ù–ï —Å–≤—è–∑–∞–Ω —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π Telegram.

üìã **–ú—ã —Å–æ–±–∏—Ä–∞–µ–º:**
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (–∏–º—è, username)
‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö (–ë–ï–ó –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç)

üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –î–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç –ù–ï –ø–æ–ø–∞–¥–∞—é—Ç –Ω–∞ –Ω–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã
‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Payments
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –±–∞–∑–µ Supabase

üìñ –ü–æ–ª–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞: [—Å—Å—ã–ª–∫–∞ –Ω–∞ PRIVACY_POLICY.md]
  `;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'settings')]
  ]);

  await messageManager.editMessage(ctx, privacyMessage, keyboard);
};

export default {
  showSettings,
  confirmDeleteAccount,
  deleteAccount,
  exportUserData,
  showPrivacyPolicy
}; 