import Category from '../../database/models/Category.js';
import Subscription from '../../database/models/Subscription.js';
import User from '../../database/models/User.js';
import Referral from '../../database/models/Referral.js';
import { supabase } from '../../config/supabase.js';
import messageManager from '../utils/messageManager.js';

const createInvoice = async (ctx) => {
  try {
    console.log('üéØ Creating invoice...');
    
    const categoryId = ctx.match[1];
    const user = await User.findByTelegramId(ctx.from.id);
    const category = await Category.findById(categoryId);

    console.log('User:', user?.id, 'Category:', category?.name, 'Price:', category?.price);

    if (!user || !category) {
      return messageManager.sendMessage(ctx, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    const isSubscribed = await Subscription.isUserSubscribed(user.id, categoryId);
    
    if (isSubscribed) {
      return messageManager.sendMessage(ctx, '‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–µ–π
    if (!process.env.TELEGRAM_PAYMENT_TOKEN) {
      console.error('‚ùå TELEGRAM_PAYMENT_TOKEN not configured!');
      return messageManager.sendMessage(ctx, '‚ùå –ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }

    console.log('üîê Payment token:', process.env.TELEGRAM_PAYMENT_TOKEN.substring(0, 20) + '...');

    // Create payment record
    const { data: payment, error } = await supabase
      .from('payments')
      .insert([{
        user_id: user.id,
        category_id: categoryId,
        amount: category.price,
        currency: 'RUB',
        status: 'pending'
      }])
      .select()
      .single();

    if (error) throw error;

    console.log('üíæ Payment record created:', payment.id);

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ 0 –∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const priceAmount = Math.max(1, parseInt(category.price));
    
    console.log('üí∞ Invoice details:', {
      categoryName: category.name,
      priceAmount: priceAmount,
      paymentId: payment.id,
      currency: 'RUB'
    });

    // Create Telegram invoice
    const invoiceData = {
      title: `–ü–æ–¥–ø–∏—Å–∫–∞: ${category.name}`,
      description: `–î–æ—Å—Ç—É–ø –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}" –Ω–∞ 30 –¥–Ω–µ–π`,
      payload: payment.id.toString(),
      provider_token: process.env.TELEGRAM_PAYMENT_TOKEN,
      currency: 'RUB',
      prices: [{
        label: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü',
        amount: priceAmount
      }],
      need_email: true,
      send_email_to_provider: true,
      need_phone_number: false,
      is_flexible: false
    };

    console.log('üìÑ Sending invoice with data:', JSON.stringify(invoiceData, null, 2));

    const invoiceResult = await ctx.replyWithInvoice(invoiceData);
    
    console.log('‚úÖ Invoice sent successfully:', invoiceResult.message_id);

    // Callback query –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ

  } catch (error) {
    console.error('‚ùå Create invoice error:', error);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞';
    
    if (error.description) {
      console.error('Telegram API Error:', error.description);
      
      if (error.description.includes('PAYMENT_PROVIDER_INVALID')) {
        errorMessage = '‚ùå –ü–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
      } else if (error.description.includes('CURRENCY_TOTAL_AMOUNT_INVALID')) {
        errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
      } else if (error.description.includes('PROVIDER_DATA_INVALID')) {
        errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
      }
    }
    
    await messageManager.sendMessage(ctx, errorMessage);
  }
};

const preCheckout = async (ctx) => {
  try {
    console.log('üí≥ Pre-checkout query received:', {
      from: ctx.from.id,
      payload: ctx.preCheckoutQuery.invoice_payload,
      currency: ctx.preCheckoutQuery.currency,
      total_amount: ctx.preCheckoutQuery.total_amount
    });

    // Verify payment exists in database
    const paymentId = ctx.preCheckoutQuery.invoice_payload;
    const { data: payment, error } = await supabase
      .from('payments')
      .select('*')
      .eq('id', paymentId)
      .eq('status', 'pending')
      .single();

    if (error || !payment) {
      console.error('‚ùå Payment verification failed:', error || 'Payment not found');
      await ctx.answerPreCheckoutQuery(false, '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      return;
    }

    console.log('‚úÖ Payment verified, approving checkout');
    await ctx.answerPreCheckoutQuery(true);
  } catch (error) {
    console.error('‚ùå Pre-checkout error:', error);
    await ctx.answerPreCheckoutQuery(false, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞');
  }
};

const successfulPayment = async (ctx) => {
  try {
    console.log('üéâ Successful payment received!');
    
    const payment = ctx.message.successful_payment;
    const paymentId = payment.invoice_payload;

    console.log('üí∞ Payment details:', {
      paymentId: paymentId,
      totalAmount: payment.total_amount,
      currency: payment.currency,
      telegramChargeId: payment.telegram_payment_charge_id,
      providerChargeId: payment.provider_payment_charge_id,
      email: payment.order_info?.email
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (payment.order_info?.email) {
      try {
        await User.updateEmail(ctx.from.id, payment.order_info.email);
        console.log('üìß User email updated:', payment.order_info.email);
      } catch (emailError) {
        console.error('‚ùå Error updating user email:', emailError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å email
      }
    }

    // Update payment status
    const { error: paymentError } = await supabase
      .from('payments')
      .update({
        status: 'completed',
        provider_payment_id: payment.telegram_payment_charge_id,
        completed_at: new Date().toISOString()
      })
      .eq('id', paymentId);

    if (paymentError) throw paymentError;

    console.log('üìù Payment status updated to completed');

    // Get payment details
    const { data: paymentData, error } = await supabase
      .from('payments')
      .select(`
        *,
        categories(name)
      `)
      .eq('id', paymentId)
      .single();

    if (error) throw error;

    console.log('üìä Payment data retrieved:', {
      userId: paymentData.user_id,
      categoryId: paymentData.category_id,
      categoryName: paymentData.categories.name,
      amount: paymentData.amount
    });

    // Create subscription
    const expiresAt = new Date();
    expiresAt.setMonth(expiresAt.getMonth() + 1);

    const subscription = await Subscription.create(
      paymentData.user_id,
      paymentData.category_id,
      expiresAt.toISOString()
    );

    console.log('‚úÖ Subscription created:', subscription.id, 'expires:', expiresAt);

    // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
    const user = await User.findByTelegramId(ctx.from.id);
    if (user.referrer_id) {
      try {
        console.log('üí∞ Processing referral commission for referrer:', user.referrer_id);
        
        await Referral.addCommission(
          user.referrer_id,
          user.id,
          paymentData.id,
          paymentData.amount
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        await Referral.updateReferralStats(user.referrer_id, 'new_payment', paymentData.amount);
        await Referral.updateReferralStats(user.referrer_id, 'activation');

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        await notifyReferrer(ctx, user.referrer_id, paymentData.amount, paymentData.categories.name);

        console.log('‚úÖ Referral commission processed successfully');
      } catch (referralError) {
        console.error('‚ùå Error processing referral commission:', referralError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
      }
    }

    const successMessage = `
‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${paymentData.categories.name}
üí∞ –°—É–º–º–∞: ${(payment.total_amount / 100).toFixed(0)}‚ÇΩ
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: ${expiresAt.toLocaleDateString('ru-RU')}

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö!
    `;

    await messageManager.sendMessage(ctx, successMessage);

    console.log('üéä Payment processing completed successfully');

  } catch (error) {
    console.error('‚ùå Successful payment error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
};

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
const notifyReferrer = async (ctx, referrerId, paymentAmount, categoryName) => {
  try {
    const { data: referrerUser } = await supabase
      .from('users')
      .select('telegram_id, referral_balance')
      .eq('id', referrerId)
      .single();

    if (!referrerUser) return;

    const stats = await Referral.getReferralStats(referrerId);
    const commissionAmount = Math.round(paymentAmount * stats.current_commission_percent / 100);

    const notificationMessage = `
üéâ –ù–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ!

üí∞ –°—É–º–º–∞: +${(commissionAmount / 100).toFixed(0)}‚ÇΩ
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç: ${stats.current_commission_percent}%

üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: ${(referrerUser.referral_balance / 100).toFixed(0)}‚ÇΩ

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º!
    `;

    await ctx.telegram.sendMessage(referrerUser.telegram_id, notificationMessage);
  } catch (error) {
    console.error('Error notifying referrer:', error);
  }
};

export default {
  createInvoice,
  preCheckout,
  successfulPayment
}; 