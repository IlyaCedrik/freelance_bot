import Category from '../../database/models/Category.js';
import Subscription from '../../database/models/Subscription.js';
import User from '../../database/models/User.js';
import { categoriesKeyboard } from '../keyboards/categories.js';
import { subscriptionKeyboard } from '../keyboards/subscription.js';
import messageManager from '../utils/messageManager.js';
import { supabase } from '../../config/supabase.js';

const showCategories = async (ctx) => {
  try {
    const categories = await Category.getAll();
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
      return messageManager.sendMessage(ctx, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    }

    const userSubscriptions = await Subscription.getUserSubscriptions(user.id);
    const subscribedCategoryIds = userSubscriptions.map(sub => sub.category_id);

    const message = `
üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:

${categories.map(cat => {
  const isSubscribed = subscribedCategoryIds.includes(cat.id);
  const status = isSubscribed ? '‚úÖ' : '‚≠ï';
  const price = (cat.price / 100).toFixed(0);
  return `${status} ${cat.name} - ${price}‚ÇΩ/–º–µ—Å`;
}).join('\n')}

üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ—Ç–ø–∏—Å–∫–∏:
    `;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
    if (ctx.callbackQuery) {
      // –ï—Å–ª–∏ —ç—Ç–æ callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º editMessage
      await messageManager.editMessage(ctx, message, categoriesKeyboard(categories, subscribedCategoryIds));
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º sendMessage
      await messageManager.sendMessage(ctx, message, categoriesKeyboard(categories, subscribedCategoryIds));
    }
  } catch (error) {
    console.error('Show categories error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
  }
};

const subscribe = async (ctx) => {
  try {
    const categoryId = ctx.match[1];
    const user = await User.findByTelegramId(ctx.from.id);
    const category = await Category.findById(categoryId);

    if (!user || !category) {
      return messageManager.sendMessage(ctx, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    const isSubscribed = await Subscription.isUserSubscribed(user.id, categoryId);

    if (isSubscribed) {
      return messageManager.sendMessage(ctx, '‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    }

    const price = (category.price / 100).toFixed(0);
    const message = `
üìÇ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞: ${category.name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${price}‚ÇΩ –≤ –º–µ—Å—è—Ü

${category.description || ''}

–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:
    `;

    await messageManager.sendMessage(ctx, message, subscriptionKeyboard(categoryId));
  } catch (error) {
    console.error('Subscribe error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
  }
};

const unsubscribe = async (ctx) => {
  try {
    const categoryId = ctx.match[1];
    const user = await User.findByTelegramId(ctx.from.id);
    const category = await Category.findById(categoryId);

    if (!user || !category) {
      return messageManager.sendMessage(ctx, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    await Subscription.deactivate(user.id, categoryId);
    
    await messageManager.sendMessage(ctx, `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ "${category.name}" –æ—Ç–º–µ–Ω–µ–Ω–∞`);
  } catch (error) {
    console.error('Unsubscribe error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏');
  }
};

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
const confirmCancelSubscription = async (ctx) => {
  try {
    const categoryId = ctx.match[1];
    const user = await User.findByTelegramId(ctx.from.id);
    const category = await Category.findById(categoryId);

    if (!user || !category) {
      return messageManager.sendMessage(ctx, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    const isSubscribed = await Subscription.isUserSubscribed(user.id, categoryId);
    if (!isSubscribed) {
      return messageManager.sendMessage(ctx, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    const { data: subscription, error } = await supabase
      .from('subscriptions')
      .select('*')
      .eq('user_id', user.id)
      .eq('category_id', categoryId)
      .eq('is_active', true)
      .single();

    if (error) throw error;

    const expiresAt = new Date(subscription.expires_at);
    const daysLeft = Math.ceil((expiresAt - new Date()) / (1000 * 60 * 60 * 24));

    const confirmMessage = `
‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏**

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresAt.toLocaleDateString('ru-RU')}
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}

‚ùó **–í–∞–∂–Ω–æ:**
‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤—ã –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ ${expiresAt.toLocaleDateString('ru-RU')}

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
    `;

    const { Markup } = await import('telegraf');
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', `confirm_cancel_${categoryId}`)],
      [Markup.button.callback('‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', 'my_subscriptions')]
    ]);

    await messageManager.editMessage(ctx, confirmMessage, keyboard);

  } catch (error) {
    console.error('Confirm cancel subscription error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
const cancelSubscriptionFinal = async (ctx) => {
  try {
    const categoryId = ctx.match[1];
    const user = await User.findByTelegramId(ctx.from.id);
    const category = await Category.findById(categoryId);

    if (!user || !category) {
      return messageManager.sendMessage(ctx, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ –æ—Ç–º–µ–Ω—ã
    const { data: subscription, error: subError } = await supabase
      .from('subscriptions')
      .select('expires_at')
      .eq('user_id', user.id)
      .eq('category_id', categoryId)
      .eq('is_active', true)
      .single();

    if (subError) throw subError;

    // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await Subscription.deactivate(user.id, categoryId);

    const expiresAt = new Date(subscription.expires_at);
    const successMessage = `
‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞**

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}
üìÖ –ë—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${expiresAt.toLocaleDateString('ru-RU')}

üí° **–ß—Ç–æ –¥–∞–ª—å—à–µ:**
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!
    `;

    const { Markup } = await import('telegraf');
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'categories')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);

    await messageManager.editMessage(ctx, successMessage, keyboard);

    console.log(`Subscription cancelled: User ${user.id}, Category ${categoryId}`);

  } catch (error) {
    console.error('Cancel subscription final error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
};

const mySubscriptions = async (ctx) => {
  try {
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
      return messageManager.sendMessage(ctx, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const subscriptions = await Subscription.getUserSubscriptions(user.id);

    if (subscriptions.length === 0) {
      const message = 'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n\nüí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É';
      
      if (ctx.callbackQuery) {
        await messageManager.editMessage(ctx, message);
      } else {
        await messageManager.sendMessage(ctx, message);
      }
      return;
    }

    const message = `
üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:

${subscriptions.map(sub => {
  const expiresAt = new Date(sub.expires_at);
  const daysLeft = Math.ceil((expiresAt - new Date()) / (1000 * 60 * 60 * 24));
  return `‚Ä¢ ${sub.categories.name} (–æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π)`;
}).join('\n')}

üí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:
    `;

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    const { Markup } = await import('telegraf');
    const buttons = subscriptions.map(sub => [
      Markup.button.callback(`‚ùå –û—Ç–º–µ–Ω–∏—Ç—å "${sub.categories.name}"`, `cancel_subscription_${sub.category_id}`)
    ]);
    
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
    if (ctx.callbackQuery) {
      // –ï—Å–ª–∏ —ç—Ç–æ callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º editMessage
      await messageManager.editMessage(ctx, message, keyboard);
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º sendMessage
      await messageManager.sendMessage(ctx, message, keyboard);
    }
  } catch (error) {
    console.error('My subscriptions error:', error);
    await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫');
  }
};

export default {
  showCategories,
  subscribe,
  unsubscribe,
  mySubscriptions,
  confirmCancelSubscription,
  cancelSubscriptionFinal
}; 