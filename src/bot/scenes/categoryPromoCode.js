/**
 * @fileoverview –°—Ü–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @author FreelanceBot Team
 * @version 1.0.0
 */

import { Scenes, Markup } from 'telegraf';
import Referral from '../../database/models/Referral.js';
import User from '../../database/models/User.js';
import Category from '../../database/models/Category.js';
import Subscription from '../../database/models/Subscription.js';
import messageManager from '../utils/messageManager.js';

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
const categoryPromoCodeScene = new Scenes.WizardScene(
  'USE_CATEGORY_PROMO_CODE',
  
  /**
   * –®–∞–≥ 1: –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async (ctx) => {
    const categoryId = ctx.scene.state.categoryId;
    
    try {
      const category = await Category.findById(categoryId);
      if (!category) {
        await messageManager.sendMessage(ctx, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return ctx.scene.leave();
      }

      const message = `
üé´ –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}

üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:

üí° –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–µ—Ç –¥–∞—Ç—å:
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –°–∫–∏–¥–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø

‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑`;

      await messageManager.sendMessage(
        ctx,
        message,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_category_promo')]
        ])
      );
      
      return ctx.wizard.next();
    } catch (error) {
      console.error('Category promo code scene error:', error);
      await messageManager.sendMessage(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      return ctx.scene.leave();
    }
  },

  /**
   * –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
   */
  async (ctx) => {
    const promoCode = ctx.message?.text?.trim().toUpperCase();
    const categoryId = ctx.scene.state.categoryId;
    
    if (!promoCode) {
      await messageManager.sendMessage(
        ctx,
        '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
      );
      return;
    }

    try {
      const user = await User.findByTelegramId(ctx.from.id);
      const category = await Category.findById(categoryId);
      
      if (!user || !category) {
        await messageManager.sendMessage(ctx, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return ctx.scene.leave();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const isSubscribed = await Subscription.isUserSubscribed(user.id, categoryId);
      if (isSubscribed) {
        await messageManager.sendMessage(ctx, '‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
        return ctx.scene.leave();
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
      const result = await Referral.applyReferralCode(promoCode, user.id);
      
      if (!result) {
        await messageManager.sendMessage(
          ctx, 
          `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`
        );
        return;
      }

      if (result.type === 'promo') {
        // –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        let responseMessage = `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!`;
        
                 if (result.bonusDays > 0) {
           // –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
           const subscriptionEnd = new Date();
           subscriptionEnd.setDate(subscriptionEnd.getDate() + result.bonusDays);
           
           await Subscription.create(user.id, categoryId, subscriptionEnd, false);
          
          responseMessage += `\n\nüéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${result.bonusDays} –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}"!`;
          responseMessage += `\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${subscriptionEnd.toLocaleDateString('ru-RU')}`;
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
          try {
            const userName = ctx.from.first_name || ctx.from.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            await ctx.telegram.sendMessage(
              result.creatorTelegramId,
              `üéâ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}`
            );
          } catch (notifyError) {
            console.error('Failed to notify promo code creator:', notifyError);
          }
        } else {
          responseMessage += `\n\nüí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É ${result.discountPercent}% –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É!`;
          responseMessage += `\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–æ —Å–∫–∏–¥–∫–æ–π.`;
        }
        
        await messageManager.sendMessage(
          ctx, 
          responseMessage,
          Markup.inlineKeyboard([
            [Markup.button.callback('üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'categories')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ])
        );
      } else {
        await messageManager.sendMessage(
          ctx,
          '‚ùå –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        );
      }
      
      return ctx.scene.leave();
      
    } catch (error) {
      console.error('Apply category promo code error:', error);
      await messageManager.sendMessage(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
      return ctx.scene.leave();
    }
  }
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
categoryPromoCodeScene.action('cancel_category_promo', async (ctx) => {
  await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
  await messageManager.sendMessage(
    ctx,
    '–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω',
    Markup.inlineKeyboard([
      [Markup.button.callback('üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'categories')],
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ])
  );
  return ctx.scene.leave();
});

export default categoryPromoCodeScene; 