/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞
 */
import { Markup } from 'telegraf';
import { 
  ERROR_MESSAGES,
  SUCCESS_MESSAGES,
  RECOVERY_MESSAGES,
  LOG_CONFIG,
  REGEX_PATTERNS 
} from '../../config/constants.js';

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} handlers - –û–±—ä–µ–∫—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
 */
export function setupCommands(bot, handlers) {
  const { startHandler, subscriptionHandler, profileHandler, referralHandler  } = handlers;

  bot.start(startHandler.startHandler);
  bot.command('categories', subscriptionHandler.showCategories);
  bot.command('referral_program', referralHandler.showReferralProgram);
  bot.command('profile', profileHandler.showProfile);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} handlers - –û–±—ä–µ–∫—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
 */
export function setupSubscriptionActions(bot, handlers) {
  const { subscriptionHandler, paymentHandler } = handlers;

  bot.action(REGEX_PATTERNS.SUBSCRIBE, subscriptionHandler.subscribe);
  bot.action(REGEX_PATTERNS.UNSUBSCRIBE, subscriptionHandler.unsubscribe);
  bot.action(REGEX_PATTERNS.TRIAL, subscriptionHandler.activateTrial);
  bot.action(REGEX_PATTERNS.PAY, paymentHandler.createInvoice);
  bot.action(REGEX_PATTERNS.USE_PROMO, subscriptionHandler.useCategoryPromoCode);
  bot.action(REGEX_PATTERNS.CANCEL_SUBSCRIPTION, subscriptionHandler.confirmCancelSubscription);
  bot.action(REGEX_PATTERNS.CONFIRM_CANCEL, subscriptionHandler.cancelSubscriptionFinal);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} handlers - –û–±—ä–µ–∫—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
 */
export function setupReferralActions(bot, handlers) {
  const { referralHandler } = handlers;

  bot.action('withdraw_card', (ctx) => referralHandler.initiateWithdraw(ctx, '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'));
  bot.action('withdraw_qiwi', (ctx) => referralHandler.initiateWithdraw(ctx, 'QIWI'));
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} messageManager - –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export function setupPromoCodeActions(bot, messageManager) {
  // –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
  bot.action('cancel_promo_creation', async (ctx) => {
    try {
      await ctx.answerCbQuery(SUCCESS_MESSAGES.PROMO_CANCELLED);
      await messageManager.sendMessage(
        ctx,
        SUCCESS_MESSAGES.PROMO_CANCELLED,
        Markup.inlineKeyboard([
          [Markup.button.callback('üìä –ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ', 'referral_program')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
        ])
      );
    } catch (error) {
      console.error(LOG_CONFIG.ERROR.PROMO_CREATION_ERROR, error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ü–µ–Ω–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  const promoActions = ['promo_days_\\d+', 'promo_discount_\\d+', 'promo_limit_\\d+'];
  promoActions.forEach(pattern => {
    bot.action(new RegExp(`^${pattern}$`), async (ctx) => {
      if (ctx.scene && ctx.scene.current) {
        return; // –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–µ, –ø–æ–∑–≤–æ–ª–∏–º —Å—Ü–µ–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      }
      await ctx.answerCbQuery(ERROR_MESSAGES.START_PROMO_FIRST);
    });
  });

  bot.action('confirm_promo_creation', async (ctx) => {
    if (ctx.scene && ctx.scene.current) {
      return;
    }
    await ctx.answerCbQuery(ERROR_MESSAGES.START_PROMO_FIRST);
  });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} messageManager - –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export function setupPromoRequestActions(bot, messageManager) {
  // –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  bot.action('cancel_promo_request', async (ctx) => {
    try {
      await ctx.answerCbQuery(SUCCESS_MESSAGES.REQUEST_CANCELLED);
      await messageManager.sendMessage(
        ctx,
        SUCCESS_MESSAGES.REQUEST_CANCELLED,
        Markup.inlineKeyboard([
          [Markup.button.callback('üìä –ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ', 'referral_program')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
        ])
      );
    } catch (error) {
      console.error(LOG_CONFIG.ERROR.PROMO_REQUEST_ERROR, error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ü–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  const requestActions = ['request_days_\\d+', 'request_discount_\\d+', 'request_limit_\\d+'];
  requestActions.forEach(pattern => {
    bot.action(new RegExp(`^${pattern}$`), async (ctx) => {
      if (ctx.scene && ctx.scene.current) {
        return;
      }
      await ctx.answerCbQuery(ERROR_MESSAGES.START_REQUEST_FIRST);
    });
  });

  bot.action('confirm_promo_request', async (ctx) => {
    if (ctx.scene && ctx.scene.current) {
      return;
    }
    await ctx.answerCbQuery(ERROR_MESSAGES.START_REQUEST_FIRST);
  });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} adminHandlers - –ê–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
 */
export function setupAdminActions(bot, adminHandlers) {
  const {
    requireAdmin,
    showAdminPanel,
    showChannelManagement,
    showCategoryManagement,
    showUserManagement,
    listChannels,
    listCategories,
    listUsers,
    showChannelDetails,
    startAddChannel,
    startMakeAdmin
  } = adminHandlers;

  // –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏—è (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤)
  bot.action('admin_main', requireAdmin, showAdminPanel);
  bot.action('admin_channels', requireAdmin, showChannelManagement);
  bot.action('admin_categories', requireAdmin, showCategoryManagement);
  bot.action('admin_users', requireAdmin, showUserManagement);
  bot.action('admin_list_channels', requireAdmin, listChannels);
  bot.action('admin_list_categories', requireAdmin, listCategories);
  bot.action('admin_list_users', requireAdmin, listUsers);
  bot.action('admin_add_channel', requireAdmin, startAddChannel);
  bot.action('admin_make_admin', requireAdmin, startMakeAdmin);
  bot.action(REGEX_PATTERNS.ADMIN_CHANNEL_DETAILS, requireAdmin, showChannelDetails);

  // –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  bot.command('admin', requireAdmin, showAdminPanel);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} paymentHandler - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export function setupPaymentHandlers(bot, paymentHandler) {
  bot.on('pre_checkout_query', paymentHandler.preCheckout);
  bot.on('successful_payment', paymentHandler.successfulPayment);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} messageManager - –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export function setupGlobalCallbackHandler(bot, messageManager) {
  bot.on('callback_query', async (ctx) => {
    // –ï—Å–ª–∏ callback query –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
    if (!ctx.callbackQuery.answered) {
      const callbackData = ctx.callbackQuery.data;
      const userId = ctx.from.id;
      const sceneName = ctx.scene?.current?.id || 'none';
      
      console.log(LOG_CONFIG.ERROR.UNKNOWN_CALLBACK(callbackData, userId, sceneName));
      
      try {
        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å—Ü–µ–Ω–µ
        if (callbackData.startsWith('promo_') || callbackData === 'confirm_promo_creation') {
          await ctx.answerCbQuery(ERROR_MESSAGES.PROMO_SESSION_EXPIRED);
          await messageManager.sendMessage(
            ctx,
            RECOVERY_MESSAGES.PROMO_EXPIRED,
            Markup.inlineKeyboard([
              [Markup.button.callback('üé´ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'create_promo_code')],
              [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
            ])
          );
        } else if (callbackData.startsWith('request_') || callbackData === 'confirm_promo_request') {
          await ctx.answerCbQuery(ERROR_MESSAGES.REQUEST_SESSION_EXPIRED);
          await messageManager.sendMessage(
            ctx,
            RECOVERY_MESSAGES.REQUEST_EXPIRED,
            Markup.inlineKeyboard([
              [Markup.button.callback('üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'create_promo_code')],
              [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
            ])
          );
        } else {
          await ctx.answerCbQuery(ERROR_MESSAGES.UNKNOWN_COMMAND);
          await messageManager.sendMessage(ctx, ERROR_MESSAGES.UNKNOWN_COMMAND);
        }
      } catch (error) {
        console.error(LOG_CONFIG.ERROR.CALLBACK_QUERY_ERROR, error);
      }
    }
  });
} 