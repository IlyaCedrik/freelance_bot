import messageManager from './messageManager.js';

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞
 * –í—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å
 */

class Navigation {
  constructor() {
    // –ö–∞—Ä—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: action -> handler
    this.routes = new Map();
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ action'–∞
   * @param {string} action - –Ω–∞–∑–≤–∞–Ω–∏–µ action'–∞
   * @param {Function} handler - —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  register(action, handler) {
    this.routes.set(action, handler);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
   * @param {string} action - –Ω–∞–∑–≤–∞–Ω–∏–µ action'–∞
   * @param {Object} ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   */
  async handle(action, ctx) {
    try {
      console.log(`üß≠ Navigation: ${action} for user ${ctx.from.id}`);

      const handler = this.routes.get(action);
      
      if (!handler) {
        console.error(`‚ùå No handler found for action: ${action}`);
        await messageManager.sendMessage(ctx, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        return;
      }

      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      await handler(ctx);

      // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (ctx.callbackQuery && !ctx.callbackQuery.answered) {
        await ctx.answerCbQuery();
      }

    } catch (error) {
      console.error(`‚ùå Navigation error for action '${action}':`, error);
      
      try {
        await messageManager.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        if (ctx.callbackQuery && !ctx.callbackQuery.answered) {
          await ctx.answerCbQuery();
        }
      } catch (e) {
        console.error('Failed to send error message:', e);
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ navigation action'–æ–≤
   * @param {string} action - –Ω–∞–∑–≤–∞–Ω–∏–µ action'–∞
   * @returns {Function} middleware —Ñ—É–Ω–∫—Ü–∏—è
   */
  middleware(action) {
    return async (ctx) => {
      await this.handle(action, ctx);
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö routes
   * @returns {Array} –º–∞—Å—Å–∏–≤ action'–æ–≤
   */
  getRoutes() {
    return Array.from(this.routes.keys());
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const navigation = new Navigation();

export default navigation; 